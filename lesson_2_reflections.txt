What happens when you initialize a repository? Why do you need to do it?
	Git isn't tracking any file history until you tell it to do so with the init command.  
	The init commmand will create the hidden .git directory where it tracks all 
	the metadata relating to the files in the repository.


How is the staging area different from the working directory and the repository?
What value do you think it offers?
	The staging area is a set of files that are ready to be committed as one unit.
	There may be other files in the working directory that have changes, but are not
	logically part of what you want to commit.
	The repository contains a series of snapshot of all files in the repository since it was created.  
	The working directory only contains your current state of the files, some of which may not yet be in the repository.

How can you use the staging area to make sure you have one commit per logical
change?
	After adding files to the staging area, you can double check that the files you've added 
	only include the changes you intend by using git diff --staged.  If all looks good, you can then commit the changes.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
	Branches could be used to track changes for major updates or to experiment with new features.  Different branches could be created and changed while still being able to update and release the master version.

How do the diagrams help you visualize the branch structure?
	The diagrams are really helpful in visualizing the branch structure.  
	This would be even more important when multiple people are working on the project 
	and adding various features and fixing bugs along the way.  
	Seeing the structure helps me understand what is going on.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
	Merging branches includes changes that have occurred in both branches into the currently checked out branch.  
	I am a bit confused about the warning I got trying to delete the coins branch after the merge:
	 ("not deleting branch 'coins' that is not yet merged to 'refs/remotes/origin/coins', even though it is merged to HEAD")

	 Also, I'm confused how to actually have various versions/branches in progress.  If you have made changes in a branch, but haven't committed them yet, you can't do a checkout without losing your intermediate changes.  Do you need to maintain different working directories to handle this?

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
