When would you want to use a remote repository rather than keeping all your work
local?

	Remote repositories are useful anytime you are working with someone else on a project, 
	are working on multiple computers, 
	or you could even use the remote repository as a back up.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    I would want to control when changes are pulled from the remote.  
    If someone else makes changes to the remote, and I'm working on the same files locally, I don't want my local repository to be updated with someone else's changes.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Forks create a copy of someone else's repository on your GitHub account.  
    You can then pull down the code to your local machine and make changes without affecting the original owner's repository.
    Your fork will still have a link back to the original however.

    Cloning also makes a copy of an existing repository; but is most commonly used to clone a GitHub repository to your local machine.
    Changes you then make locally and push will change the original GitHub repository.

    Branches are collections of changes made within a repository.  You can work on and commit changes to a branch without affecting the main branch.  
    You control when you are ready to merge your changes into the main branch.


What is the benefit of having a copy of the last known state of the remote
stored locally?

    A copy of the last known state of the remote on your local machine allows you to merge your local changes into the origin and resolve any conflicts locally before pushing to the remote repository.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    I can't imagine trying to collaborate without some kind of code management system.  Without Git/GitHub or something like it, I would think you would have to allow only one person to edit a file at a time to avoid conflicts.  
    The comment features on pull requests are great for code reviews.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    Most times you would want to use a branch.  This helps keeps each each collaborators code separate and should be easier to merge if several people have made changes. It also gives you a chance to test out and make sure the intermediate merged changes are working as intended before they are merged with the master.
